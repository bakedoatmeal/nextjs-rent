import Head from 'next/head';
import { useForm } from 'react-hook-form';
import { motion } from 'framer-motion';
import { ExclamationCircleIcon } from '@heroicons/react/solid';
import toast, { Toaster } from 'react-hot-toast';
import React from 'react'
import {gql, resetCaches, useMutation} from '@apollo/client'
import prisma from '../lib/prisma'

const CreateRentLogMutation = gql`
  mutation($name: String!, $email: String!, $rentalType: String!, $rentalSize: String!, $address: String!, $year: Int!, $rent: Int!) {
    createRentLog(name: $name, email: $email, rentalType: $rentalType, rentalSize: $rentalSize, address: $address, year: $year, rent: $rent) {
      name
      email
      rentalType
      rentalSize
      address
      year
      rent
    }
  }
`

export default function Home() {
  const {
    register,
    handleSubmit,
    formState: { errors, isSubmitted },
  } = useForm();

  const [createRentLog, {loading, error}] = useMutation(CreateRentLogMutation)
  const onSubmit = async (data) => {
    const {name, email, rentalType, rentalSize, address, year, rent} = data
    const variables = {name, email, rentalType, rentalSize, address, year, rent}
    variables.year = parseInt(variables.year)
    variables.rent = parseInt(variables.rent)
    console.log(variables)
    try {
      toast.promise(
        createRentLog({variables}),
        {
          loading: 'Working on it...',
          success: 'Rent logged successfully!',
          error: 'Oops! something went wrong.',
        }
      );
    } catch (error) {
      console.error(error)
    }
  };

  return (
    <div>
    <Head>
      <title>Rent Database</title>
      <meta name="description" content="Generated by create next app" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    <section>
      <Toaster />
      <div className="max-w-md mx-auto px-4">
        <h1 className="font-bold text-3xl md:text-4xl text-white tracking-wide mb-10 text-center">
          Log your rent to get started!
        </h1>
        <form
          onSubmit={handleSubmit(onSubmit)}
          className="grid grid-cols-1 gap-y-6 shadow-lg p-10 bg-[#131415] rounded-lg"
        >

<div>
              <label htmlFor="name" className="sr-only">
                Full name
              </label>
              <div className="relative">
                <input
                  {...register('name', { required: true })}
                  type="text"
                  name="name"
                  id="name"
                  autoComplete="name"
                  className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-[#131415] placeholder-gray-500  border-gray-700 rounded-md ${
                    errors.name
                      ? 'focus:ring-red-500 border-red-500'
                      : 'focus:ring-blue-500 focus:border-blue-500'
                  }`}
                  placeholder="Full name"
                />
                {errors.name && (
                  <div className="absolute inset-y-0 right-0 pr-3 flex items-center pointer-events-none">
                    <ExclamationCircleIcon
                      className="h-5 w-5 text-red-600"
                      aria-hidden="true"
                    />
                  </div>
                )}
              </div>
            </div>
          <div className="relative">
            <label htmlFor="email" className="sr-only">
              Email
            </label>
            <input
              id="email"
              name="email"
              {...register('email', { required: true })}
              type="email"
              autoComplete="email"
              className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-[#131415] placeholder-gray-500   border-gray-700 rounded-md ${
                errors.name
                  ? 'focus:ring-red-500 border-red-500'
                  : 'focus:ring-blue-500 focus:border-blue-500'
              }`}
              placeholder="Email"
            />
            {errors.email && (
              <div className="absolute inset-y-0 right-0 pb-2 pr-3 flex items-center pointer-events-none">
                <ExclamationCircleIcon
                  className="h-5 w-5 text-red-600"
                  aria-hidden="true"
                />
              </div>
            )}
          </div>
          <div>
            <label htmlFor="rentalType" className="sr-only">
              Rental Type
            </label>
            <select
              id="rentalType"
              name="rentalType"
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base bg-[#131415] placeholder-gray-500 text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              defaultValue="APARTMENT"
              {...register('rentalType', { required: true })}
            >
              <option>APARTMENT</option>
              <option>HOUSE</option>
              <option>DUPLEX</option>
            </select>
          </div>
          <div>
            <label htmlFor="rentalSize" className="sr-only">
              Size
            </label>
            <select
              id="rentalSize"
              name="rentalSize"
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base bg-[#131415] placeholder-gray-500 text-white focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm rounded-md"
              defaultValue="THREEANDAHALF"
              {...register('rentalSize', { required: true })}
            >
              <option value="TWOANDAHALF">2 1/2 (Studio)</option>
              <option value="THREEANDAHALF">3 1/2 (1 bedroom)</option>
              <option value="FOURANDAHALF">4 1/2 (2 bedroom)</option>
              <option value="FIVEANDAHALF">5 1/2 (3 bedroom)</option>
            </select>
          </div>

          <div className="relative">
            <label htmlFor="year" className="sr-only">
              Year
            </label>
            <input
              id="year"
              name="year"
              type="number"
              min="2000"
              max="2023"
              {...register('year', { required: true })}
              className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-[#131415] placeholder-gray-500   border-gray-700 rounded-md ${
                errors.name
                  ? 'focus:ring-red-500 border-red-500'
                  : 'focus:ring-blue-500 focus:border-blue-500'
              }`}
              placeholder="year"
              defaultValue="2022"
            />
            {errors.message && (
              <div className="absolute top-3 right-0 pb-2 pr-3 flex items-center pointer-events-none">
                <ExclamationCircleIcon
                  className="h-5 w-5 text-red-600"
                  aria-hidden="true"
                />
              </div>
            )}
          </div>
          <div className="relative">
            <label htmlFor="address" className="sr-only">
              Address
            </label>
            <textarea
              id="address"
              name="address"
              {...register('address', { required: true })}
              rows={4}
              className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-[#131415] placeholder-gray-500   border-gray-700 rounded-md ${
                errors.name
                  ? 'focus:ring-red-500 border-red-500'
                  : 'focus:ring-blue-500 focus:border-blue-500'
              }`}
              placeholder="Address"
              defaultValue={''}
            />
            {errors.message && (
              <div className="absolute top-3 right-0 pb-2 pr-3 flex items-center pointer-events-none">
                <ExclamationCircleIcon
                  className="h-5 w-5 text-red-600"
                  aria-hidden="true"
                />
              </div>
            )}
          </div>
          <div className="relative">
            <label htmlFor="rent" className="sr-only">
              Monthly Rent
            </label>
            <input
              id="rent"
              name="rent"
              {...register('rent', { required: true })}
              type="text"
              autoComplete="rent"
              className={`block w-full shadow-sm py-3 text-white px-4 mb-2 bg-[#131415] placeholder-gray-500   border-gray-700 rounded-md ${
                errors.name
                  ? 'focus:ring-red-500 border-red-500'
                  : 'focus:ring-blue-500 focus:border-blue-500'
              }`}
              placeholder="Rent"
            />
            {errors.rent && (
              <div className="absolute inset-y-0 right-0 pb-2 pr-3 flex items-center pointer-events-none">
                <ExclamationCircleIcon
                  className="h-5 w-5 text-red-600"
                  aria-hidden="true"
                />
              </div>
            )}
          </div>
          <div>
            <motion.button
              disabled={isSubmitted}
              whileHover={{
                scale: 1.02,
                transition: { duration: 0.2 },
              }}
              whileTap={{
                scale: 0.9,
                transition: { duration: 0.2 },
              }}
              type="submit"
              className="w-full justify-center py-3 px-6 border border-transparent shadow-sm text-base font-medium rounded-md text-white bg-blue-800 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Submit
            </motion.button>
          </div>
        </form>
      </div>
    </section>
  </div>
  );
}
